{
  "type": "object",
  "properties": {
    "service": {
      "type": "object",
      "description": "DC/OS service configuration properties",
      "properties": {
        "name": {
          "description": "The name of the service instance",
          "type": "string",
          "default": "miniod",
          "title": "Service name"
        },
        "user": {
          "description": "The user that the service will run as.",
          "type": "string",
          "default": "nobody",
          "title": "User"
        },
        "ssl_enabled": {
          "description": "Enables SSL support for Minio Cluster",
          "type": "boolean",
          "default": false
        },
        "service_account": {
          "description": "The service account for DC/OS service authentication. This is typically left empty to use the default unless service authentication is needed. The value given here is passed as the principal of Mesos framework.",
          "type": "string",
          "default": ""
        },
        "service_account_secret": {
          "description": "Name of the Secret Store credentials to use for DC/OS service authentication. This should be left empty unless service authentication is needed.",
          "type": "string",
          "default": "",
          "title": "Credential secret name (optional)"
        },
        "virtual_network_enabled": {
          "description": "Enable virtual networking",
          "type": "boolean",
          "default": false
        },
        "virtual_network_name": {
          "description": "The name of the virtual network to join",
          "type": "string",
          "default": "dcos"
        },
        "virtual_network_plugin_labels": {
          "description": "Labels to pass to the virtual network plugin. Comma-separated key:value pairs. For example: k_0:v_0,k_1:v_1,...,k_n:v_n",
          "type": "string",
          "default": ""
        },
        "log_level": {
          "description": "The log level for the DC/OS service.",
          "type": "string",
          "enum": [
            "OFF",
            "FATAL",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "TRACE",
            "ALL"
          ],
          "default": "INFO"
        }
      },
      "required": [
        "name",
        "user"
      ]
    },
    "minio": {
      "description": "Minio configuration properties",
      "type": "object",
      "properties": {
        "enable_secrets": {
          "description": "Enables storing Minio credentials in secret store",
          "type": "boolean",
          "default": false
        },
        "minio_access_key": {
          "title": "Minio Access Key",
          "description": "Minio requires Access Key Id to start in distributed mode.",
          "type": "string",
          "default": "minio"
        },
        "minio_secret_key": {
          "title": "Minio Secret Key",
          "description": "Minio requires Secret Access Key to start in distributed mode.",
          "type": "string",
          "default": "minio123"
        },
        "minio_port": {
          "title": "Minio Port",
          "description": "Minio servers will run at this port.",
          "type": "integer",
          "default": 9000
        },
        "count": {
          "title": "Node count",
          "description": "Number of Minio servers to run. Number of servers should be even and greater than equal to 4.",
          "type": "integer",
          "minimum": 4,
          "default": 4
        },
        "placement_constraint": {
          "default": "hostname:UNIQUE",
          "description": "Marathon-style placement constraint for Hello pods",
          "type": "string"
        },
        "cpus": {
          "title": "CPU count",
          "description": "Minio pod CPU requirements",
          "type": "number",
          "default": 2
        },
        "mem": {
          "title": "Memory size (MB)",
          "description": "Minio pod memory requirements (in MB)",
          "type": "integer",
          "default": 252
        },
        "disk": {
          "title": "Disk size (MB)",
          "description": "Minio pod persistent disk requirements (in MB)",
          "type": "integer",
          "default": 200
        },
        "disk_type": {
          "title": "Disk type [ROOT, MOUNT]",
          "description": "Mount volumes require preconfiguration in DC/OS",
          "enum": [
            "ROOT",
            "MOUNT"
          ],
          "default": "ROOT"
        },
        "disk_path": {
          "title": "Disk path",
          "description": "Only specify if storing data outside of sandbox",
          "type": "string",
          "default": ""
        },
        "backup_store_endpoint": {
          "title": "Backup Store Endpoint",
          "description": "Backup service requires an endpoint of a S3 compatible Storage system",
          "type": "string",
          "default": "https://s3.amazonaws.com"
        },
        "cache_enable": {
          "title": "Minio cache enable",
          "description": "Enable Disk Caching in Minio, to store content closer to the tenants",
          "type": "boolean",
          "default": false
        },
        "cache_disk": {
          "title": "Disk size (MB)",
          "description": "Size of Cache disk (in MB)",
          "type": "integer",
          "default": 252
        },
        "cache_disk_type": {
          "title": "Disk type [ROOT, MOUNT]",
          "description": "Mount volumes require preconfiguration in DC/OS",
          "enum": [
            "ROOT",
            "MOUNT"
          ],
          "default": "ROOT"
        },
        "cache_disk_path": {
          "title": "Disk path",
          "description": "Only specify if storing data outside of sandbox",
          "type": "string",
          "default": ""
        },
        "CONFIG_MUSTACHE_BASE64": {
          "title": "MinioD Config",
          "description": "Get MinioD Config in Base64",
          "type": "string"
        }
      },
      "required": [
        "count",
        "cpus",
        "mem",
        "disk",
        "disk_type"
      ]
    }
  }
}