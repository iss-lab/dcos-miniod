name: {{FRAMEWORK_NAME}}
scheduler:
 principal: {{FRAMEWORK_PRINCIPAL}}
 user: {{FRAMEWORK_USER}}
pods:
 miniod:
   count: {{MINIO_NODE_COUNT}}
   image: {{MINIO_DOCKER_IMAGE}}
   placement: '{{{MINIO_NODE_PLACEMENT}}}'
   {{#MINIO_NODE_DISK_PATH}}
   host-volumes:
      minio-data-path:
        host-path: {{MINIO_NODE_DISK_PATH}}
        container-path: data-path
      {{#CACHE_DISK_PATH}}
      minio-cache-path:
        host-path: {{CACHE_DISK_PATH}}
        container-path: cache-path
      {{/CACHE_DISK_PATH}}
   {{/MINIO_NODE_DISK_PATH}}
   {{#ENABLE_VIRTUAL_NETWORK}}
   networks:
     {{VIRTUAL_NETWORK_NAME}}:
       labels: {{VIRTUAL_NETWORK_PLUGIN_LABELS}}
   {{/ENABLE_VIRTUAL_NETWORK}}
   resource-sets:
     node-resources:
       cpus: {{MINIO_NODE_CPUS}}
       memory: {{MINIO_NODE_MEM}}
       ports:
         miniod:
           port: {{MINIO_NODE_PORT}}
           advertise: true
           vip:
             prefix: miniod
             port: 9000
       volumes:
         data-repository:
           path: data-path
           type: {{MINIO_NODE_DISK_TYPE}}
           size: {{MINIO_NODE_DISK}}
         {{#TASKCFG_ALL_MINIO_CACHE_ENABLE}}
         cache-repository:
           path: cache-path
           type: {{CACHE_DISK_TYPE}}
           size: {{CACHE_DISK}}
         {{/TASKCFG_ALL_MINIO_CACHE_ENABLE}}
   {{#MINIO_SECRETS_ENABLED}}
   secrets:
     accesskey:
       secret: {{FRAMEWORK_NAME}}/access_key
       file: access_key_file
     secretkey:
       secret: {{FRAMEWORK_NAME}}/secret_key
       file: secret_key_file
   {{/MINIO_SECRETS_ENABLED}}
   uris:
     - {{BOOTSTRAP_URI}}
   tasks:
     node:
       resource-set: node-resources
       goal: RUNNING
       cmd: |
            ./bootstrap

            set -a
            . ./config.env
            set +a

            ### Set operator access and secret keys
            {{#MINIO_SECRETS_ENABLED}}
            export MINIO_ACCESS_KEY=`cat $MESOS_SANDBOX/access_key_file`
            export MINIO_SECRET_KEY=`cat $MESOS_SANDBOX/secret_key_file`
            {{/MINIO_SECRETS_ENABLED}}
            {{^MINIO_SECRETS_ENABLED}}
            export MINIO_ACCESS_KEY={{MINIO_ACCESS_KEY}}
            export MINIO_SECRET_KEY={{MINIO_SECRET_KEY}}
            {{/MINIO_SECRETS_ENABLED}}

            ### SSL Configuration
            {{#MINIO_SSL_ENABLED}}
            cat $MESOS_SANDBOX/node.crt $MESOS_SANDBOX/node.ca > $MESOS_SANDBOX/public.crt
            mkdir $MESOS_SANDBOX/certs
            mkdir $MESOS_SANDBOX/certs/CAs
            cp $MESOS_SANDBOX/node.key $MESOS_SANDBOX/certs/private.key
            cp $MESOS_SANDBOX/public.crt $MESOS_SANDBOX/certs/
            cp $MESOS_SANDBOX/node.ca $MESOS_SANDBOX/certs/CAs
            NODE_SCHEME=https
            {{/MINIO_SSL_ENABLED}}
            {{^MINIO_SSL_ENABLED}}
            NODE_SCHEME=http
            {{/MINIO_SSL_ENABLED}}

            RESOLVE_HOSTS=""
            MINIO_CMD="/usr/bin/docker-entrypoint.sh server --address :{{MINIO_NODE_PORT}}"
            COUNTER=0
            while [ $COUNTER -lt $COUNT ]; do
              MINIO_CMD="${MINIO_CMD} ${NODE_SCHEME}://miniod-${COUNTER}-node.${FRAMEWORK_HOST}:{{MINIO_NODE_PORT}}${MESOS_SANDBOX}/data-path"
              RESOLVE_HOSTS="${RESOLVE_HOSTS} miniod-${COUNTER}-node.${FRAMEWORK_HOST},"
              let COUNTER=COUNTER+1
            done

            echo "Waiting for ${RESOLVE_HOSTS} to resolve..."
            ./bootstrap --resolve-hosts ${RESOLVE_HOSTS}
            sleep 20
            ./bootstrap --resolve-hosts ${RESOLVE_HOSTS}

            exec ${MINIO_CMD}
       {{#MINIO_SSL_ENABLED}}
       transport-encryption:
         - name: node
           type: TLS
       {{/MINIO_SSL_ENABLED}}
       configs:
         minio.properties:
           template: config.env.mustache
           dest: config.env
       health-check:
           cmd: |
                echo Health Check
                {{#MINIO_SSL_ENABLED}}
                NODE_SCHEME=https
                {{/MINIO_SSL_ENABLED}}
                {{^MINIO_SSL_ENABLED}}
                NODE_SCHEME=http
                {{/MINIO_SSL_ENABLED}}
                curl -s -k -o /dev/null -w "%{http_code}" ${NODE_SCHEME}://miniod-${POD_INSTANCE_INDEX}-node.${FRAMEWORK_HOST}:{{MINIO_NODE_PORT}}/minio/health/ready
           interval: 90 
           grace-period: 100
           max-consecutive-failures: 20
           delay: 10
           timeout: 120
       readiness-check:
           cmd: |
                echo Running Readiness Check
                {{#MINIO_SSL_ENABLED}}
                NODE_SCHEME=https
                {{/MINIO_SSL_ENABLED}}
                {{^MINIO_SSL_ENABLED}}
                NODE_SCHEME=http
                {{/MINIO_SSL_ENABLED}}
                curl -s -k -o /dev/null -w "%{http_code}" ${NODE_SCHEME}://miniod-${POD_INSTANCE_INDEX}-node.${FRAMEWORK_HOST}:{{MINIO_NODE_PORT}}/minio/health/ready
           interval: 100
           delay: 10
           timeout: 120
       env:
         COUNT: {{MINIO_NODE_COUNT}}
 minios:
   count: 1
   uris:
     - {{BOOTSTRAP_URI}}
     - {{JAVA_URI}}
     - {{MINIO_STATSD_JAR_URI}}
   tasks:
     metrics:
       goal: RUNNING
       essential: false
       cmd: |
             ./bootstrap
             export JAVA_HOME=$(ls -d $MESOS_SANDBOX/jdk*/jre*/) && export JAVA_HOME=${JAVA_HOME%/} && export PATH=$(ls -d $JAVA_HOME/bin):$PATH
             java -jar minio-statsd.jar $STATSD_UDP_HOST $STATSD_UDP_PORT 30 miniod $FRAMEWORK_VIP_HOST 9000 {{MINIO_SSL_ENABLED}}
       {{#MINIO_SSL_ENABLED}}
       transport-encryption:
         - name: node
           type: TLS
       {{/MINIO_SSL_ENABLED}}
       cpus: 0.2
       memory: 1024 
 minioc:
   count: 1
   image: {{MC_DOCKER_IMAGE}}
   placement: '{{{MINIO_NODE_PLACEMENT}}}'
   resource-sets:
     backup-resources:
       cpus: 2 
       memory: 512
   {{#MINIO_SECRETS_ENABLED}}
   secrets:
     accesskey:
       secret: {{FRAMEWORK_NAME}}/access_key
       file: access_key_file
     secretkey:
       secret: {{FRAMEWORK_NAME}}/secret_key
       file: secret_key_file
   {{/MINIO_SECRETS_ENABLED}}
   uris:
     - {{BOOTSTRAP_URI}}
     - {{MINIO_INIT_SH}}
     - {{MINIO_SYNCHRONIZE_SH}}
   tasks:
     backup:
       resource-set: backup-resources
       goal: ONCE
       cmd: |
            sh init.sh
            sh synchronize-buckets.sh
            servicename=`echo "$FRAMEWORK_NAME" | sed 's/\///g'`
            N=0
            for i in $(mc --config-folder $MESOS_SANDBOX ls minioclient/) ; do
            if [ `expr $N % 5` -eq 4 ]
            then
                bucket=${i%/}
                backupbucket=$servicename-$bucket
                mc --config-folder $MESOS_SANDBOX mb s3compatibleclient/$backupbucket
                mc --config-folder $MESOS_SANDBOX mirror --remove minioclient/$bucket s3compatibleclient/$backupbucket
            fi
            let "N= $N + 1"
            done
       {{#MINIO_SSL_ENABLED}}
       transport-encryption:
         - name: node
           type: TLS
       {{/MINIO_SSL_ENABLED}}

       env:
         MINIO_SECRETS_ENABLED: {{MINIO_SECRETS_ENABLED}}
         MINIO_ACCESS_KEY: {{MINIO_ACCESS_KEY}}
         MINIO_SECRET_KEY: {{MINIO_SECRET_KEY}}
         MINIO_SSL_ENABLED: {{MINIO_SSL_ENABLED}}
         MINIO_NODE_PORT: {{MINIO_NODE_PORT}}
         STHREE_COMPATIBLE_URI: {{STHREE_COMPATIBLE_URI}}

     restore:
       resource-set: backup-resources
       goal: ONCE
       cmd: |
            sh $MESOS_SANDBOX/init.sh
            servicename=`echo "$FRAMEWORK_NAME" | sed 's/\///g'`
            miniobucket=`echo ${S3_BUCKET} | sed -e s,${servicename}-,,`
            mc --config-folder $MESOS_SANDBOX mb minioclient/$miniobucket
            mc --config-folder $MESOS_SANDBOX mirror s3compatibleclient/${S3_BUCKET}/ minioclient/$miniobucket
       {{#MINIO_SSL_ENABLED}}
       transport-encryption:
         - name: node
           type: TLS
       {{/MINIO_SSL_ENABLED}}
       env:
         MINIO_SECRETS_ENABLED: {{MINIO_SECRETS_ENABLED}}
         MINIO_ACCESS_KEY: {{MINIO_ACCESS_KEY}}
         MINIO_SECRET_KEY: {{MINIO_SECRET_KEY}}
         MINIO_SSL_ENABLED: {{MINIO_SSL_ENABLED}}
         MINIO_NODE_PORT: {{MINIO_NODE_PORT}}
         STHREE_COMPATIBLE_URI: {{STHREE_COMPATIBLE_URI}}

     recover:
       resource-set: backup-resources
       goal: ONCE
       cmd: |
            {{#MINIO_SECRETS_ENABLED}}
            export MINIO_ACCESS_KEY=`cat $MESOS_SANDBOX/access_key_file`
            export MINIO_SECRET_KEY=`cat $MESOS_SANDBOX/secret_key_file`
            {{/MINIO_SECRETS_ENABLED}}
            {{^MINIO_SECRETS_ENABLED}}
            export MINIO_ACCESS_KEY={{MINIO_ACCESS_KEY}}
            export MINIO_SECRET_KEY={{MINIO_SECRET_KEY}}
            {{/MINIO_SECRETS_ENABLED}}
            {{#MINIO_SSL_ENABLED}}
            mkdir $MESOS_SANDBOX/certs
            mkdir $MESOS_SANDBOX/certs/CAs
            cp $MESOS_SANDBOX/node.ca $MESOS_SANDBOX/certs/CAs
            mc --config-folder $MESOS_SANDBOX config host add minioclient https://miniod.${FRAMEWORK_VIP_HOST}:9000 $MINIO_ACCESS_KEY $MINIO_SECRET_KEY
            {{/MINIO_SSL_ENABLED}}
            {{^MINIO_SSL_ENABLED}}
            mc --config-folder $MESOS_SANDBOX config host add minioclient http://miniod.${FRAMEWORK_VIP_HOST}:9000 $MINIO_ACCESS_KEY $MINIO_SECRET_KEY
            {{/MINIO_SSL_ENABLED}}
            mc --config-folder $MESOS_SANDBOX admin heal -r minioclient

       {{#MINIO_SSL_ENABLED}}
       transport-encryption:
         - name: node
           type: TLS
       {{/MINIO_SSL_ENABLED}}
    
plans:
  deploy:
    strategy: serial
    phases:
       master-deploy:
        strategy: serial
        pod: miniod
       statsd-deploy:
        strategy: parallel
        pod: minios
  backup:
    strategy: serial
    phases:
      minio-client:
        strategy: serial
        pod: minioc
        steps:
          - default: [[backup]]
  restore:
    strategy: serial
    phases:
      minio-restore:
        strategy: serial
        pod: minioc
        steps:
          - default: [[restore]]
  recover:
    strategy: serial
    phases:
      minio-recover:
        strategy: serial
        pod: minioc
        steps:
          - default: [[recover]]

